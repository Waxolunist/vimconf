execute pathogen#infect()

" Functions
function! InitBackupDir() 
  if has('win32') || has('win32unix') "windows/cygwin 
    let parent = $HOME .'/vimfiles/' 
  else 
    let parent = $HOME .'/.vim/' 
  endif 

  let backup = parent . 'backup/' 
  let tmp = parent . 'tmp/' 

  if exists("*mkdir") 
    if !isdirectory(parent) 
      call mkdir(parent) 
    endif 
    if !isdirectory(backup) 
      call mkdir(backup) 
    endif 
    if !isdirectory(tmp) 
      call mkdir(tmp) 
    endif 
  endif 

  let missing_dir = 0 
  if isdirectory(backup) 
    execute 'set backupdir=' . escape(backup, " ") . "/,." 
  else 
    let missing_dir = 1 
  endif 
  if isdirectory(tmp) 
    execute 'set directory=' . escape(tmp, " ") . "/,." 
  else 
    let missing_dir = 1 
  endif 

  if missing_dir 
    echo "Warning: Unable to create backup directories: " . backup ." and " . tmp 
    echo "Try: mkdir -p " . backup 
    echo "and: mkdir -p " . tmp 
    set backupdir=. 
    set directory=. 
  endif 

endfunction 

function! RedSpace()
	" Highlight redundant whitespaces
	" This will highlight the whitespace characters at end of line
	highlight WhitespaceEOL ctermbg=red guibg=red
	match WhitespaceEOL /\s\+$/ 
	" This will highlight spaces before a tab: 
	highlight RedundantSpaces ctermbg=red guibg=red 
	match RedundantSpaces /\s\+$\| \+\ze\t/ 
endfunction

function! NoRedSpace()
	" Highlight redundant whitespaces
	" This will highlight the whitespace characters at end of line
	highlight WhitespaceEOL ctermbg=bg guibg=bg
	match WhitespaceEOL /\s\+$/ 
	" This will highlight spaces before a tab: 
	highlight RedundantSpaces ctermbg=bg guibg=bg 
	match RedundantSpaces /\s\+$\| \+\ze\t/ 
endfunction

fu! FileTime()
        let ext=tolower(expand("%:e"))
        let fname=tolower(expand('%<'))
        let filename=fname . '.' . ext
        let msg=""
        let msg=msg." ".strftime("(Modified %b,%d %y %H:%M:%S)",getftime(filename))
        return msg
endf

fu! CurTime()
  let ftime=""
  let ftime=ftime." ".strftime("%H:%M:%S")
  return ftime
endf 

" Configuration
if has('win32') || has('win32unix') "windows/cygwin 
	source $HOME/vimfiles/vimrc_win32
else 
	source $HOME/.vim/vimrc_unix
endif 

" If you want to get more Mac-like behavior, leave the "finish" line
" commented out.  This may break menu translations.  For vim-standard menus,
" uncomment this line so that the rest of the file will be ignored.
" REQUIRED. This makes vim invoke latex-suite when you open a tex file.
filetype plugin on

" IMPORTANT: win32 users will need to have 'shellslash' set so that latex
" can be called correctly.
set shellslash

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse latex-suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*

let voom_tree_placement = 'right'

"let moria_style = 'dark'
"colors moria
syntax enable
set background=dark
colorscheme solarized
:hi CursorLine term=bold cterm=bold,reverse ctermbg=0 ctermfg=6 guibg=LightGray
:hi CursorColumn term=bold cterm=bold,reverse ctermbg=0 ctermfg=6 guibg=LightGrey
:hi CtrlPLinePre term=bold cterm=bold ctermbg=0 ctermfg=2 guibg=LightGrey

" Use Nerdtree instead of winmanager
" map <c-w><c-t> :WMToggle<cr> 
" map <c-w><c-f> :FirstExplorerWindow<cr>
" map <c-w><c-b> :BottomExplorerWindow<cr>

vmap <silent> <Right> l
vmap <silent> <Left> h
vmap <silent> <Up> gk
vmap <silent> <Down> gj
nmap <silent> <Right> l
nmap <silent> <Left> h
nmap <silent> <Up> gk
nmap <silent> <Down> gj
imap <silent> <Up> <C-o>gk
imap <silent> <Down> <C-o>gj

if !exists(':Bash')
  command! -bang Bash call conque_term#open('bash')
endif

if has("autocmd")
  aug filetype_java
    au!
    autocmd Filetype java setlocal omnifunc=javacomplete#Complete
    autocmd Filetype java setlocal completefunc=javacomplete#CompleteParamsInfo 
    autocmd Filetype java inoremap <buffer> <c-x><c-u> <c-x><c-u><c-p>
    autocmd Filetype java inoremap <buffer> <c-s-space> <c-x><c-u><c-p> 
    autocmd Filetype java inoremap <c-space> <c-x><c-o>
    autocmd Filetype java map <C-F8> :call SetJavaClasspath()<CR>
  aug end

  aug filetype_javascript
    autocmd Filetype javascript inoremap <c-space> <c-x><c-o>
    autocmd Filetype javascript map <F8> :TagbarToggle<CR>
  aug end

  aug filetype_python
    au!
    au FileType python setl sw=2 sts=2 et
  aug end

  " Always show csv files as tables, don't preserve the spaces
  " Set the cursorline in csv files
  aug CSV_Editing
    au!
    au VimEnter,WinEnter,BufWinEnter *.csv setlocal cursorline
    au WinLeave *.csv setlocal nocursorline
 aug end
 let g:csv_autocmd_arrange = 1
endif

noremap <silent> <F8> :TlistToggle<CR>
let Tlist_Use_Right_Window = 1

" Use vim-airline instead
" set statusline=%<%f%<%{FileTime()}%<%h%m%r%<%{fugitive#statusline()}%=%-10.(%l/%L,%c%V,BfNm=%n%Y%)%=%-10.(%)\%P\*%=%{CurTime()}
" set rulerformat=%15(%c%V\ %p%%%)

" OPTIONAL: This enables automatic indentation as you type.
filetype indent on
set ts=2
set expandtab
set ai

set foldmethod=syntax

set ls=2
set shiftwidth=2

set nu
set wrap
set linebreak
set nolist
set hlsearch

let g:ctrlp_map = ',t'
nmap ,. ,t
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'cra'
nnoremap ,c :let g:ctrlp_working_path_mode = 'c'<CR>
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:30,results:30'

" let g:airline#extensions#tabline#enabled = 1
let g:miniBufExplMapWindowNavVim = 1 
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplMapCTabSwitchBufs = 1 
let g:miniBufExplModSelTarget = 1 
map <C-Right> :bn!<CR>
map <C-Left> :bp!<CR>
nnoremap <C-m> :MBEOpen<CR>:MBEFocus<CR>

nnoremap H :set cursorline! cursorcolumn!<CR>

command! -nargs=* Wrap set wrap linebreak nolist

" nerdtree
let g:persistentBehaviour=0
let g:defaultExplorer=0
map <C-n> :NERDTreeCWD<CR>:NERDTreeFocus<CR>
autocmd vimenter * if !argc() | NERDTree | endif

" Go Fullscreen
map <C-F11> :MBEToggle<CR>:NERDTreeToggle<CR>

nmap gu :Utl<cr>
let g:utl_opt_highlight_urls='yes'
let g:utl_opt_verbose=0		    " 0=no (default), 1=yes
nmap ,l :exe ":Utl ol http://dict.leo.org/?search=" . expand("<cword>")

let g:vim_json_syntax_conceal = 0

call InitBackupDir()
