" Functions
function! InitBackupDir() 
  if has('win32') || has('win32unix') "windows/cygwin 
    let parent = $HOME .'/vimfiles/' 
  else 
    let parent = $HOME .'/.vim/' 
  endif 

  let backup = parent . 'backup/' 
  let tmp = parent . 'tmp/' 

  if exists("*mkdir") 
    if !isdirectory(parent) 
      call mkdir(parent) 
    endif 
    if !isdirectory(backup) 
      call mkdir(backup) 
    endif 
    if !isdirectory(tmp) 
      call mkdir(tmp) 
    endif 
  endif 

  let missing_dir = 0 
  if isdirectory(tmp) 
    execute 'set backupdir=' . escape(backup, " ") . "/,." 
  else 
    let missing_dir = 1 
  endif 
  if isdirectory(backup) 
    execute 'set directory=' . escape(tmp, " ") . "/,." 
  else 
    let missing_dir = 1 
  endif 

  if missing_dir 
    echo "Warning: Unable to create backup directories: " . backup ." and " . tmp 
    echo "Try: mkdir -p " . backup 
    echo "and: mkdir -p " . tmp 
    set backupdir=. 
    set directory=. 
  endif 

endfunction 

function! RedSpace()
	" Highlight redundant whitespaces
	" This will highlight the whitespace characters at end of line
	highlight WhitespaceEOL ctermbg=red guibg=red
	match WhitespaceEOL /\s\+$/ 
	" This will highlight spaces before a tab: 
	highlight RedundantSpaces ctermbg=red guibg=red 
	match RedundantSpaces /\s\+$\| \+\ze\t/ 
endfunction

function! NoRedSpace()
	" Highlight redundant whitespaces
	" This will highlight the whitespace characters at end of line
	highlight WhitespaceEOL ctermbg=bg guibg=bg
	match WhitespaceEOL /\s\+$/ 
	" This will highlight spaces before a tab: 
	highlight RedundantSpaces ctermbg=bg guibg=bg 
	match RedundantSpaces /\s\+$\| \+\ze\t/ 
endfunction

fu! FileTime()
        let ext=tolower(expand("%:e"))
        let fname=tolower(expand('%<'))
        let filename=fname . '.' . ext
        let msg=""
        let msg=msg." ".strftime("(Modified %b,%d %y %H:%M:%S)",getftime(filename))
        return msg
endf

fu! CurTime()
  let ftime=""
  let ftime=ftime." ".strftime("%H:%M:%S")
  return ftime
endf 

" Configuration
if has('win32') || has('win32unix') "windows/cygwin 
	source $HOME/vimfiles/vimrc_win32
else 
	source $HOME/.vim/vimrc_unix
endif 

" If you want to get more Mac-like behavior, leave the "finish" line
" commented out.  This may break menu translations.  For vim-standard menus,
" uncomment this line so that the rest of the file will be ignored.
" REQUIRED. This makes vim invoke latex-suite when you open a tex file.
filetype plugin on

" IMPORTANT: win32 users will need to have 'shellslash' set so that latex
" can be called correctly.
set shellslash

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse latex-suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*

let voom_tree_placement = 'right'

let moria_style = 'dark'
colors moria

let g:defaultExplorer=0
let g:persistentBehaviour=0
map <c-w><c-t> :WMToggle<cr> 
map <c-w><c-f> :FirstExplorerWindow<cr>
map <c-w><c-b> :BottomExplorerWindow<cr>

vmap <silent> <Right> l
vmap <silent> <Left> h
vmap <silent> <Up> gk
vmap <silent> <Down> gj
nmap <silent> <Right> l
nmap <silent> <Left> h
nmap <silent> <Up> gk
nmap <silent> <Down> gj
imap <silent> <Up> <C-o>gk
imap <silent> <Down> <C-o>gj

:command Bash call conque_term#open('bash')


if has("autocmd")
  aug filetype_java
    au!
	  autocmd Filetype java setlocal omnifunc=javacomplete#Complete
  	autocmd Filetype java setlocal completefunc=javacomplete#CompleteParamsInfo 
    autocmd Filetype java inoremap <buffer> <c-x><c-u> <c-x><c-u><c-p>
    autocmd Filetype java inoremap <buffer> <c-s-space> <c-x><c-u><c-p> 
    autocmd Filetype java inoremap <c-space> <c-x><c-o>
  aug end

  aug filetype_python
    au!
    au FileType py set omnifunc=pythoncomplete#Complete
    autocmd Filetype py inoremap <c-space> <c-x><c-n> 
  aug end

  " Always show csv files as tables, don't preserve the spaces
  " Set the cursorline in csv files
  aug CSV_Editing
    au!
    au BufRead,BufWritePost *.csv :%ArrangeColumn
    au BufWritePre *.csv :%UnArrangeColumn
    au VimEnter,WinEnter,BufWinEnter *.csv setlocal cursorline
    au WinLeave *.csv setlocal nocursorline
  aug end
endif


set statusline=%<%f%<%{FileTime()}%<%h%m%r%<%{fugitive#statusline()}%=%-10.(%l/%L,%c%V,BfNm=%n%Y%)%=%-10.(%)\%P\*%=%{CurTime()}
set rulerformat=%15(%c%V\ %p%%%)

" OPTIONAL: This enables automatic indentation as you type.
filetype indent on
syntax on
set ts=2
set expandtab
set ai

set foldmethod=syntax

set ls=2
set shiftwidth=2

set nu
set wrap
set linebreak
set nolist

command! -nargs=* Wrap set wrap linebreak nolist

call InitBackupDir()
call pathogen#infect()
